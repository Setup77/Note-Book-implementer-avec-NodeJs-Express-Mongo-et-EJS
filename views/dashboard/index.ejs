
<%- include('boxModal.ejs') %>
 <%- include('sweetBoxAlert.ejs') %>

<script src="http://localhost:5000/js/pagination.js"></script>
<div class="d-flex justify-content-center align-items-center">
  <h2 class="g-3 pb-0 mb-5 text-center">
<% if(anoteruser == 1 || anoteruser == 2) { %>
    Notes de <%- usernote.firstName %>
  </h2>
</div>
 <% } else {  %>
Notes de tous les utilisateurs
 <%  } %>   </h2>
</div>
<% if (session && session.user) { %>
     <div class="col-md-2 mb-1 ">  <a href="#" title="Ajouter Note" class="btn btn-primary position-fixed  start-0 m-3 "
            data-bs-toggle="modal" id="AddNote" data-bs-target="#myModalAdd"> <i class="fas fa-upload fa-lg"></i> Publier</a> </div> 
  <%  } %> 
            <!-- Pagination du haut -->
<nav class="mt-2" aria-label="Pagination top">
  <ul id="paginationTop" class="pagination justify-content-center mb-0"></ul>
</nav>      

<!-- Liste responsive : -->
<div id="notes-container" class="row  g-3 pb-5 mb-5 mx-4 mt-1">
<!-- JS injection des notes ici -->
</div>


<div id="no-results" class="alert alert-warning mt-4 no-results text-center">
  <% if(anoteruser == 2) { %>
  Aucune de vos notes trouvées.
   <% } else {  %>
 Aucune note trouvée.
 <%  } %>
</div>
<!-- Pagination du haut -->
<nav class="mt-2" aria-label="Pagination top">
  <ul id="paginationBottom" class="pagination justify-content-center mb-0"></ul>
</nav>


<script>
const notes = <%- JSON.stringify(notes) %>;
const connecter = <%- connecter %>;
const userId = "<%- userId %>";

  var searchInput = document.getElementById('search');
const container = document.getElementById('notes-container');
const noResults = document.getElementById('no-results');



// Utilitaire : initials à partir du nom
function initials(title) {
return title.split(' ').map(s => s[0] || '').slice(0,2).join('').toUpperCase();
}


// Variables globales
let currentPage = 1;
const PAGE_SIZE = 9; // nombre de notes par page
const paginationTop = document.getElementById('paginationTop');
const paginationBottom = document.getElementById('paginationBottom');

// Fonction principale pour afficher les notes
function renderItems(list) {
  container.innerHTML = '';

  if (!list.length) {
    noResults.style.display = 'block';
    paginationTop.innerHTML = '';
    paginationBottom.innerHTML = '';
    return;
  }

  noResults.style.display = 'none';

  const totalPages = Math.ceil(list.length / PAGE_SIZE);
  if (currentPage > totalPages) currentPage = totalPages || 1;

  // Découpage de la liste selon la page
  const start = (currentPage - 1) * PAGE_SIZE;
  const pageItems = list.slice(start, start + PAGE_SIZE);

  const col = document.createElement('div');
  // Création des notes visibles
pageItems.forEach(note => {
// Création de la colonne principale
const col = document.createElement('div');
col.className = 'col-md-4 mb-4';

// ----- CARTE -----
const card = document.createElement('div');
card.className = 'card border-primary';
card.style.minHeight = '210px';

// ----- LIEN DU TITRE -----
const link = document.createElement('a');
link.title = `Publié par ${note.usernote.lastName} ${note.usernote.firstName}`;
link.href = `/dashboard/note-${note._id}`;
link.className = 'text-decoration-none m-1';

// ----- TITRE -----
const title = document.createElement('h5');
title.className = 'card-title';
title.textContent = note.title;

// On place le titre dans le lien
link.appendChild(title);

// ----- TEXTE DE LA NOTE -----
const body = document.createElement('p');
body.className = 'card-text mt-3 p-1';
body.textContent = note.body;

// On ajoute le lien et le texte à la carte
card.appendChild(link);
card.appendChild(body);

// ----- SI L’UTILISATEUR EST CONNECTÉ ET EST PROPRIÉTAIRE -----

  
  // Ligne de boutons et infos
  const row = document.createElement('div');
  row.className = 'row align-items-center mt-2';
  
  // --- Colonne : Edit ---
  const colEdit = document.createElement('div');
  colEdit.className = 'col-md-3';
  const editLink = document.createElement('a');
  editLink.href = '#';
  editLink.title = 'Modifier';
  editLink.className = 'text-success ps-3';
  editLink.dataset.itemDescription = note.bodyToModify;
  editLink.dataset.itemId = note._id;
  editLink.dataset.itemName = note.titleToModify;
  editLink.dataset.bsToggle = 'modal';
  editLink.dataset.bsTarget = '#myModalModify';
  editLink.innerHTML = '<i class="fas fa-edit fa-lg"></i>';
  colEdit.appendChild(editLink);
  
  // --- Colonne : Date ---
  const colDate = document.createElement('div');
  colDate.className = 'col-md-6 text-muted';
  const small = document.createElement('small');

   small.textContent = formatFacebookDate(note.createdAt);
  colDate.appendChild(small);
  
  // --- Colonne : Delete ---
  const colDelete = document.createElement('div');
  colDelete.className = 'col-md-3';
  const delLink = document.createElement('a');
  delLink.href = '#';
  delLink.title = 'Supprimer';
  delLink.className = 'text-danger float-end pe-3 DelNote';
  delLink.dataset.itemId = note._id;
  delLink.dataset.itemName = note.titleToModify;
  delLink.dataset.bsToggle = 'modal';
  delLink.dataset.bsTarget = '#myModal';
  delLink.innerHTML = '<i class="fas fa-trash-alt fa-lg"></i>';
  colDelete.appendChild(delLink);
   // On assemble la ligne
  if (connecter == 1 && note.user.toString() == userId.toString()) {
  row.appendChild(colEdit);
  row.appendChild(colDate);
  row.appendChild(colDelete);
}
else{
  row.appendChild(colDate);
}
  // On ajoute la ligne à la carte
  card.appendChild(row);
// On assemble la colonne
col.appendChild(card);
container.appendChild(col);
});

// Met à jour les 2 barres de pagination
  renderPagination(totalPages, list);
}


function applyFilter(term = '') {
  const filtered = notes.filter(note =>
    note.title.toLowerCase().includes(term) ||
    note.body.toLowerCase().includes(term)
  );
  renderItems(filtered);
  renderPagination();
}



// événements de recherches principal et offcanvas
   searchInput.addEventListener('input', (e) => {
      const term = e.target.value.trim().toLowerCase();
      applyFilter(term);
    });


    document.addEventListener('DOMContentLoaded', () => {
  const searchInputOffcanvas = document.getElementById('searchInputOffcanvas');

  if (searchInputOffcanvas) {
    searchInputOffcanvas.addEventListener('input', (e) => {
      const term = e.target.value.trim().toLowerCase();
      applyFilter(term);
    });
  }
});


//---Initialisation des notes
document.addEventListener('DOMContentLoaded', () => {
  renderItems(notes);
});

</script>

