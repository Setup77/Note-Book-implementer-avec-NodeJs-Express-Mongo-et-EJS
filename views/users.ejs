<style>
/* Avatar circulaire avec fallback initials */
.avatar {
width: 56px;
height: 56px;
border-radius: 50%;
object-fit: cover;
background-color: #e9ecef;
display: inline-flex;
align-items: center;
justify-content: center;
font-weight: 600;
color: #495057;
text-transform: uppercase;
}
.user-card:hover { transform: translateY(-3px); }
.no-results { display: none; }
</style>

 <% 
  if (GetVar) { %>
              <script>
                document.addEventListener('DOMContentLoaded', function () {
                  const errorMessage = "<%= GetVar %>"; // Access the variable passed from the server

                  if (errorMessage && errorMessage !== 'null') { // Check for truthy value and not string 'null'
                    Swal.fire({
                      title: 'Erreur!',
                      text: errorMessage,
                      icon: 'error',
                      timer: 9000,
                      confirmButtonText: 'OK'
                    });
                  }
                });
              </script>
              <% } %>



<!-- Liste responsive : cards for mobile, table for larger screens -->
<div id="users-container" class="row  g-3 pb-5 mb-5 mx-4 mt-5">
<!-- JS injecte les cartes utilisateur ici -->
</div>


<div id="no-results" class="alert alert-warning mt-4 no-results">Aucun utilisateur trouvé.</div>


<!-- Petite pagination (exemple simple côté client) -->
<nav class="mt-4" aria-label="Pagination">
<ul id="pagination" class="pagination justify-content-center mb-0"></ul>
</nav>
</div>

<script>
const users = <%- JSON.stringify(users) %>;

// Pagination config
const PAGE_SIZE = 4;
let currentPage = 1;


const container = document.getElementById('users-container');
const searchInput = document.getElementById('search');
const noResults = document.getElementById('no-results');
const paginationEl = document.getElementById('pagination');


// Utilitaire : initials à partir du nom
function initials(firstName) {
return firstName.split(' ').map(s => s[0] || '').slice(0,2).join('').toUpperCase();
}


function renderUsers(list) {
container.innerHTML = '';
if (!list.length) {
noResults.style.display = 'block';
paginationEl.innerHTML = '';
return;
}
noResults.style.display = 'none';


// Pagination slicing
const totalPages = Math.ceil(list.length / PAGE_SIZE);
if (currentPage > totalPages) currentPage = totalPages || 1;
const start = (currentPage - 1) * PAGE_SIZE;
const pageItems = list.slice(start, start + PAGE_SIZE);


// créer les cartes
pageItems.forEach(user => {
const col = document.createElement('div');
col.className = 'col-12 col-md-6 col-sm-12 ';
col.innerHTML = `
<div class="card user-card shadow-sm h-100 ">
<div class="card-body d-flex gap-3 align-items-center">
<div style="flex:0 0 auto;">
${user.avatar ?
`<img src="img/${user.avatar}" alt="Avatar ${user.firstName}" class="avatar border" onerror="this.style.display='none'; this.nextElementSibling.style.display='inline-flex'">` :
`<div class="avatar">${initials(user.firstName)}</div>`
}
${user.avatar ? `<div style="display:none;" class="avatar">${initials(user.firstName)}</div>` : ''}
</div>
<div class="flex-grow-1">
<h5 class="card-title mb-1"> <a class="text-decoration-none" href="/profil-${user._id}" title="Profil"> ${user.firstName} </a> ${user.lastName}</h5>
<p class="card-text mb-1 text-muted">${user.email}</p>
<span class="badge text-bg-secondary">${user.role}</span>
</div>

<div class="d-none d-sm-block text-end" style="flex:0 0 90px;">
<button class="btn btn-sm btn-outline-secondary">Note</button>
</div>


</div>
</div>
`;
container.appendChild(col);
});


renderPagination(totalPages);
}

function renderPagination(totalPages) {
paginationEl.innerHTML = '';
if (totalPages <= 1) return;


// Prev
const prevLi = document.createElement('li');
prevLi.className = 'page-item' + (currentPage === 1 ? ' disabled' : '');
prevLi.innerHTML = `<button class="page-link">Préc</button>`;
prevLi.onclick = () => { if (currentPage>1) { currentPage--; applyFilter(); } };
paginationEl.appendChild(prevLi);


// Pages (limité à quelques boutons)
const displayRange = 5;
let start = Math.max(1, currentPage - Math.floor(displayRange/2));
let end = Math.min(totalPages, start + displayRange -1);
if (end - start + 1 < displayRange) start = Math.max(1, end - displayRange + 1);


for (let p = start; p <= end; p++) {
const li = document.createElement('li');
li.className = 'page-item' + (p === currentPage ? ' active' : '');
li.innerHTML = `<button class="page-link">${p}</button>`;
li.onclick = () => { currentPage = p; applyFilter(); };
paginationEl.appendChild(li);
}


// Next
const nextLi = document.createElement('li');
nextLi.className = 'page-item' + (currentPage === totalPages ? ' disabled' : '');
nextLi.innerHTML = `<button class="page-link">Suiv</button>`;
nextLi.onclick = () => { if (currentPage<totalPages) { currentPage++; applyFilter(); } };
paginationEl.appendChild(nextLi);
}


function applyFilter() {
const q = searchInput.value.trim().toLowerCase();
const filtered = users.filter(u => (u.firstName + ' ' + u.email + ' ' + u.role).toLowerCase().includes(q));
renderUsers(filtered);
}


// événements
searchInput.addEventListener('input', () => { currentPage = 1; applyFilter(); });
// initial render
renderUsers(users);
</script>